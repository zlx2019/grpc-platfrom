// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/produce.proto

package produce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProduceServiceClient is the client API for ProduceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProduceServiceClient interface {
	// 定义一个请求参数为流、响应参数为消息的接口
	SendStream(ctx context.Context, opts ...grpc.CallOption) (ProduceService_SendStreamClient, error)
	// 定义一个返回值为数据流的接口
	GetStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ProduceService_GetStreamClient, error)
}

type produceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProduceServiceClient(cc grpc.ClientConnInterface) ProduceServiceClient {
	return &produceServiceClient{cc}
}

func (c *produceServiceClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (ProduceService_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProduceService_ServiceDesc.Streams[0], "/payload.ProduceService/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &produceServiceSendStreamClient{stream}
	return x, nil
}

type ProduceService_SendStreamClient interface {
	Send(*ProduceRequest) error
	CloseAndRecv() (*ProduceReply, error)
	grpc.ClientStream
}

type produceServiceSendStreamClient struct {
	grpc.ClientStream
}

func (x *produceServiceSendStreamClient) Send(m *ProduceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *produceServiceSendStreamClient) CloseAndRecv() (*ProduceReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProduceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *produceServiceClient) GetStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ProduceService_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProduceService_ServiceDesc.Streams[1], "/payload.ProduceService/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &produceServiceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProduceService_GetStreamClient interface {
	Recv() (*BodyReply, error)
	grpc.ClientStream
}

type produceServiceGetStreamClient struct {
	grpc.ClientStream
}

func (x *produceServiceGetStreamClient) Recv() (*BodyReply, error) {
	m := new(BodyReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProduceServiceServer is the server API for ProduceService service.
// All implementations must embed UnimplementedProduceServiceServer
// for forward compatibility
type ProduceServiceServer interface {
	// 定义一个请求参数为流、响应参数为消息的接口
	SendStream(ProduceService_SendStreamServer) error
	// 定义一个返回值为数据流的接口
	GetStream(*emptypb.Empty, ProduceService_GetStreamServer) error
	mustEmbedUnimplementedProduceServiceServer()
}

// UnimplementedProduceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProduceServiceServer struct {
}

func (UnimplementedProduceServiceServer) SendStream(ProduceService_SendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStream not implemented")
}
func (UnimplementedProduceServiceServer) GetStream(*emptypb.Empty, ProduceService_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedProduceServiceServer) mustEmbedUnimplementedProduceServiceServer() {}

// UnsafeProduceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProduceServiceServer will
// result in compilation errors.
type UnsafeProduceServiceServer interface {
	mustEmbedUnimplementedProduceServiceServer()
}

func RegisterProduceServiceServer(s grpc.ServiceRegistrar, srv ProduceServiceServer) {
	s.RegisterService(&ProduceService_ServiceDesc, srv)
}

func _ProduceService_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProduceServiceServer).SendStream(&produceServiceSendStreamServer{stream})
}

type ProduceService_SendStreamServer interface {
	SendAndClose(*ProduceReply) error
	Recv() (*ProduceRequest, error)
	grpc.ServerStream
}

type produceServiceSendStreamServer struct {
	grpc.ServerStream
}

func (x *produceServiceSendStreamServer) SendAndClose(m *ProduceReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *produceServiceSendStreamServer) Recv() (*ProduceRequest, error) {
	m := new(ProduceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProduceService_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProduceServiceServer).GetStream(m, &produceServiceGetStreamServer{stream})
}

type ProduceService_GetStreamServer interface {
	Send(*BodyReply) error
	grpc.ServerStream
}

type produceServiceGetStreamServer struct {
	grpc.ServerStream
}

func (x *produceServiceGetStreamServer) Send(m *BodyReply) error {
	return x.ServerStream.SendMsg(m)
}

// ProduceService_ServiceDesc is the grpc.ServiceDesc for ProduceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProduceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payload.ProduceService",
	HandlerType: (*ProduceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _ProduceService_SendStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStream",
			Handler:       _ProduceService_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/produce.proto",
}
